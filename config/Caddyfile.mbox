{
	http_port 80
	https_port 443
	email marcus@means.no

	acme_ca https://acme-v02.api.letsencrypt.org/directory
	log {
		level ERROR
	}
	servers :443 {
		listener_wrappers {
			http_redirect
			tls
		}
	}
	servers :80 {
		protocols h1 h2c
	}
	order authenticate before respond
	security {
		oauth identity provider pocketid {
			delay_start 3
			realm generic
			driver generic
			client_id {$POCKET_ID}
			client_secret {$POCKET_SECRET}
			scopes openid email profile
			base_auth_url https://auth.means.no
			metadata_url https://auth.means.no/.well-known/openid-configuration
		}

		authentication portal pocketid {
			crypto default token lifetime 3600 # Seconds until you have to re-authenticate
			enable identity provider pocketid
			cookie insecure off
			cookie domain means.no
			ui {
				links {
					"My Identity" "/whoami" icon "las la-user"
				}
			}

			transform user {
				match realm generic
				action add role user
			}
		}

		authorization policy pocketid {
			set auth url /caddy-security/oauth2/generic
			allow roles user
			inject headers with claims
			validate bearer header
		}
	}
}

# Tailnet

(caddy-tailscale) {
	encode gzip
	tls {
		import /run/agenix/cloudflareToken
	}
	header {
		-Server
		Strict-Transport-Security "max-age=31536000; include-subdomains;"
		X-XSS-Protection "1; mode=block"
		X-Frame-Options "DENY"
		X-Content-Type-Options nosniff
		Referrer-Policy no-referrer-when-downgrade
		X-Robots-Tag "none"
	}
}

localhost:80 {
	redir https://{host}{uri} permanent
}
# sites

mbox.means.no:443 {
	import caddy-tailscale
	reverse_proxy mbox:5000
}

thefeed.no:443 {
	import caddy-tailscale
	reverse_proxy localhost:8282
}

calibre.means.no:443 {
	import caddy-tailscale
	@auth {
		path /caddy-security/*
	}
	route @auth {
		authenticate with pocketid
	}
	route /* {
		authorize with pocketid
		reverse_proxy localhost:8083
	}
}
incus.means.no:443 {
	import caddy-tailscale
	@auth {
		path /caddy-security/*
	}
	route @auth {
		authenticate with pocketid
	}
	route /* {
		reverse_proxy unix//var/lib/incus/unix.socket
	}
}
