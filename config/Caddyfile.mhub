{
	http_port 80
	https_port 443
	email marcus@means.no

	acme_ca https://acme-v02.api.letsencrypt.org/directory
	log {
		level ERROR
	}
	servers :443 {
		listener_wrappers {
			http_redirect
			tls
		}
	}

	servers :80 {
		protocols h1 h2c
	}

  order authenticate before respond
	security {
		oauth identity provider pocketid {
			delay_start 3
			realm generic
			driver generic
			client_id ${POCKET_ID} 
			client_secret ${POCKET_SECRET} 
			scopes openid email profile
			base_auth_url https://auth.means.no
			metadata_url https://auth.means.no/.well-known/openid-configuration
		}

		authentication portal pocketid {
			crypto default token lifetime 3600 # Seconds until you have to re-authenticate
			enable identity provider pocketid
			cookie insecure off # Set to "on" if you're not using HTTPS

			transform user {
				match realm generic
				action add role user
			}
		}

		authorization policy pocketid {
			set auth url /caddy-security/oauth2/generic
			allow roles user
			inject headers with claims
		}
	}
}

# Tailnet

(caddy-common) {
	encode gzip
	# tls /etc/caddy/cloudflare.crt /etc/caddy/cloudflare.key
	tls {
		import /run/agenix/cloudflareToken
	}
	header {
		-Server
		Strict-Transport-Security "max-age=31536000; include-subdomains;"
		X-XSS-Protection "1; mode=block"
		X-Frame-Options "DENY"
		X-Content-Type-Options nosniff
		Referrer-Policy no-referrer-when-downgrade
		X-Robots-Tag "none"
	}
}

(caddy-tailscale) {
	encode gzip
	tls {
		import /run/agenix/cloudflareToken
	}
	header {
		-Server
		Strict-Transport-Security "max-age=31536000; include-subdomains;"
		X-XSS-Protection "1; mode=block"
		X-Frame-Options "DENY"
		X-Content-Type-Options nosniff
		Referrer-Policy no-referrer-when-downgrade
		X-Robots-Tag "none"
	}
}

(matrix-well-known-header) {
	# Headers
	header Access-Control-Allow-Origin "*"
	header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
	header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization"
	header Content-Type "application/json"
}

(matrix) {
	import caddy-common
	handle /.well-known/matrix/server {
		import matrix-well-known-header
		respond `{"m.server":"means.no/"}`
	}
	handle /.well-known/matrix/client {
		import matrix-well-known-header
		respond `{"m.homeserver":{"base_url":"https://means.no/"}}`
	}
}

localhost:80 {
	redir https://{host}{uri} permanent
}
# sites
#
atuin.means.no:443 {
	import caddy-common
	reverse_proxy localhost:8888
}

books.means.no:443 {
	import caddy-common
	reverse_proxy localhost:5080
}

mhub.means.no:443 {
	import caddy-tailscale
	reverse_proxy mhub:8123
}

home.means.no:443 {
	import caddy-common
	reverse_proxy mhub:8123
}

fab.means.no:443 {
	import caddy-common
	reverse_proxy fab.lan
}

movies.means.no:443 {
	import caddy-common
	reverse_proxy localhost:7878
}

transmission.means.no:443 {
	import caddy-tailscale
	reverse_proxy localhost:9091
}

nzb.means.no:443 {
	import caddy-common
	reverse_proxy localhost:6789
}

passwords.means.no:443 {
	import caddy-common
	reverse_proxy localhost:8222
}

rss.means.no:443 {
	import caddy-common
	reverse_proxy localhost:8485
}

tv.means.no:443 {
	import caddy-common
  @auth {
    path /caddy-security/*
  }
  route @auth {
    authenticate with pocketid
  }
  route /* {
    authorize with pocketid
    reverse_proxy localhost:8989
  }
}

webdav.means.no:443 {
	import caddy-common
	reverse_proxy {
		to https://mspace:5006
		transport http {
			tls tls_insecure_skip_verify
		}
	}
}

mspace.means.no:443 {
	import caddy-common
	reverse_proxy {
		to https://mspace:5001
		transport http {
			tls tls_insecure_skip_verify
		}
	}
}

unifi.means.no:443 {
	import caddy-common
	reverse_proxy {
		to https://localhost:8443
		transport http {
			tls tls_insecure_skip_verify
		}
	}
}

